package test;

import java.io.*;
import java.util.*;

class Node  // Bellman-Ford Algorithm
{
	int name;
	int edge;
	
	Node(int name, int edge)
	{
		this.name = name;
		this.edge = edge;
	}
}

public class BJ11657
{
	public static long[] dis;
	public static boolean[] check;
	public static void main(String[] args) throws IOException
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int num = Integer.parseInt(st.nextToken());
		ArrayList<Node>[] arr = new ArrayList[num+1];
		dis = new long[num+1];
		Arrays.fill(dis, Integer.MAX_VALUE);
		dis[1] = 0;
		for (int i = 1; i <= num; i++)
		{
			arr[i] = new ArrayList<Node>();
		}
		int line = Integer.parseInt(st.nextToken());
		int from;
		int to;
		int edge;
		for (int i = 0; i < line; i++)
		{
			st = new StringTokenizer(br.readLine());
			from = Integer.parseInt(st.nextToken());
			to = Integer.parseInt(st.nextToken());
			edge = Integer.parseInt(st.nextToken());
			arr[from].add(new Node(to, edge));
		}
		Node nd;
		for (int i = 1; i <= num; i++)
		{
			for (int j = 1; j <= num; j++)
			{
				ArrayList<Node> frm = arr[j];
				for (int k = 0; k < frm.size(); k++)
				{
					Node too = frm.get(k);
					
					// DON'T CALCULATE WHEN NODE IS Integer.MAX_VALUE! //
          
					if (dis[j] != Integer.MAX_VALUE && dis[too.name] > dis[j] + too.edge)
					{
						dis[too.name] = dis[j] + too.edge;
                        if (i == num)
                        {
                            System.out.println(-1);
					        return;
                        }
					}
				}
			}
		}
		for (int i = 2; i <= num; i++)
		{
			if (dis[i] == Integer.MAX_VALUE)
			{
				System.out.println(-1);
			}
			else
			{
				System.out.println(dis[i]);
			}
		}
	}
}
