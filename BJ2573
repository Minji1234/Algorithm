import java.io.*;
import java.util.*;

public class BJ2573 {
	static int row, col, cc;
	static int[][] arr1;
	static int[][] arr2;
	static boolean[][] visited;
	public static void main(String[] args) throws IOException
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int tmp = 0;
		row = Integer.parseInt(st.nextToken());
		col = Integer.parseInt(st.nextToken());
		arr1 = new int[row+1][col+1]; // set to 0.
		arr2 = new int[row+1][col+1]; // set to 0.
		visited = new boolean[row+1][col+1]; // set to false.
		for (int i = 1; i <= row; i++)
		{
			st = new StringTokenizer(br.readLine());
			for (int j = 1; j <= col; j++)
			{
				tmp = Integer.parseInt(st.nextToken());
				arr1[i][j] = tmp;
				arr2[i][j] = tmp;
			}
		}
		
		
		int count = 0;
		cc = 0;
		while(true)
		{
			for (int i = 1; i <= row; i++)
			{
				for (int j = 1; j <= col; j++)
				{
					if (arr1[i][j] != 0)
					{
						tmp = dec(i, j);
						if (arr2[i][j] <= tmp)
						{
							arr2[i][j] = 0;
						}
						else
						{
							arr2[i][j] -= tmp;
						}
					}
				}
			}
			count++;
			if (check1())
			{
				System.out.println(count);
				break;
			}
			else if (check2())
			{
				System.out.println(0);
				break;
			}
			cc = 0;
			visited = new boolean[row+1][col+1];
			for (int i = 1; i <= row; i++)
			{
				System.arraycopy(arr2[i], 1, arr1[i], 1, col);
			}
		}
	}
	private static boolean check1()
	{
		for (int i = 1; i <= row; i++)
		{
			for (int j = 1; j <= col; j++)
			{
				if (arr2[i][j] != 0 && !visited[i][j])
				{
					DFS_VISIT(i, j);
					cc++;
					if (cc > 1)
						return true;
				}
			}
		}
		return false;
	}
	private static void DFS_VISIT(int i, int j)
	{
		visited[i][j] = true;
		if (!visited[i][j-1] && j-1 >= 1 && arr2[i][j-1] > 0)
			DFS_VISIT(i, j-1);
		if (!visited[i][j+1] && j+1 <= col && arr2[i][j+1] > 0)
			DFS_VISIT(i, j+1);
		if (!visited[i-1][j] && i-1 >= 1 && arr2[i-1][j] > 0)
			DFS_VISIT(i-1, j);
		if (!visited[i+1][j] && i+1 <= row && arr2[i+1][j] > 0)
			DFS_VISIT(i+1, j);
	}
	private static boolean check2()
	{
		for (int i = 1; i <= row; i++)
		{
			for (int j = 1; j <= col; j++)
			{
				if (arr2[i][j] != 0)
				{
					return false;
				}
			}
		}
		return true;
	}
	private static int dec(int i, int j)
	{
		int cnt = 0;
		if (arr1[i][j-1] == 0 && j-1 >= 1)
			cnt++;
		if (arr1[i][j+1] == 0 && j+1 <= col)
			cnt++;
		if (arr1[i-1][j] == 0 && i-1 >= 1)
			cnt++;
		if (arr1[i+1][j] == 0 && i+1 <= row)
			cnt++;
		return cnt;
	}
}
