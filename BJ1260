import java.io.*;
import java.util.*;

public class BJ1260 {
	public static int time = 0; // It will be used for DFS. Actually, you don't need this variable to solve this problem.
	static boolean[] visited;
	static int[] startTime; // You don't need startTime and finishTime too.
	static int[] finishTime;
	private static void VISIT_DFS(ArrayList<Integer>[] edges, int from)
	{
		time = time+1;
		startTime[from] = time;
		visited[from] = true;
		System.out.print(from + " ");
		int size = edges[from].size();
		for (int i = 0; i < size; i++)
		{
			int v = edges[from].get(i);
			if (!visited[v])
			{
				VISIT_DFS(edges, v);
			}
		}
		time = time+1;
		finishTime[from] = time;
	}
	public static void main(String[] args) throws IOException
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int numOfVertex = Integer.parseInt(st.nextToken());
		int numOfEdges = Integer.parseInt(st.nextToken());
		int startVertex = Integer.parseInt(st.nextToken());
		ArrayList<Integer>[] edges = new ArrayList[numOfVertex+1];
		visited = new boolean[numOfVertex+1]; // set to false. - It will be used for both DFS and BFS.
		int[] d = new int[numOfVertex+1]; // set to zero. - It will be used for BFS. Actually, you don't need this variable to solve the problem.
		int[] pdc = new int[numOfVertex+1]; // It will be used for both DFS and BFS. Actually, you don't need it.
		startTime = new int[numOfVertex+1]; // Both for DFS.
		finishTime = new int[numOfVertex+1];
		for (int i = 0; i <= numOfVertex; i++)
		{
			edges[i] = new ArrayList<Integer>();
		}
		int from, to = 0;
		for (int i = 1; i <= numOfEdges; i++)
		{
			st = new StringTokenizer(br.readLine());
			from = Integer.parseInt(st.nextToken());
			to = Integer.parseInt(st.nextToken());
			edges[from].add(to);
			edges[to].add(from);
		}
		for (int i = 1; i <= numOfVertex; i++)
		{
			Collections.sort(edges[i]); // If it is normal array, you have to use Arrays.sort(edges[i])
										// However, as they are ArrayList, you have to use Collections.sort(edges[i])
		}
		
		
		// DFS
		VISIT_DFS(edges, startVertex);
		for (int i = 1; i <= numOfVertex; i++)
		{
			if (i == startVertex)
			{
				continue;
			}
			if (!visited[i])
			{
				VISIT_DFS(edges, i);
			}
		}
		System.out.println();
		
		// BFS
		Queue q = new LinkedList();
		visited = new boolean[numOfVertex+1]; // reset to false.
		pdc = new int[numOfVertex+1]; // reset.
		visited[startVertex] = true;
		System.out.print(startVertex + " ");
		q.offer(startVertex);
		int u, size, v = 0;
		while (!q.isEmpty())
		{
			u = (int) q.poll();
			size = edges[u].size();
			for (int i = 0; i < size; i++)
			{
				v = edges[u].get(i);
				if (!visited[v])
				{
					d[v] = d[u] + 1;
					visited[v] = true;
					pdc[v] = u;
					System.out.print(v + " ");
					q.offer(v);
				}
			}
		}
	}
}



// Compact version for solving the problem.

import java.io.*;
import java.util.*;

public class Main {
	static boolean[] visited;
	private static void VISIT_DFS(ArrayList<Integer>[] edges, int from)
	{
		visited[from] = true;
		System.out.print(from + " ");
		int size = edges[from].size();
		for (int i = 0; i < size; i++)
		{
			int v = edges[from].get(i);
			if (!visited[v])
			{
				VISIT_DFS(edges, v);
			}
		}
	}
	public static void main(String[] args) throws IOException
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int numOfVertex = Integer.parseInt(st.nextToken());
		int numOfEdges = Integer.parseInt(st.nextToken());
		int startVertex = Integer.parseInt(st.nextToken());
		ArrayList<Integer>[] edges = new ArrayList[numOfVertex+1];
		visited = new boolean[numOfVertex+1]; // set to false. - It will be used for both DFS and BFS.
		for (int i = 0; i <= numOfVertex; i++)
		{
			edges[i] = new ArrayList<Integer>();
		}
		int from, to = 0;
		for (int i = 0; i < numOfEdges; i++)
		{
			st = new StringTokenizer(br.readLine());
			from = Integer.parseInt(st.nextToken());
			to = Integer.parseInt(st.nextToken());
			edges[from].add(to);
			edges[to].add(from);
		}
		for (int i = 1; i <= numOfVertex; i++)
		{
			Collections.sort(edges[i]);
		}
		
		
		// DFS
		VISIT_DFS(edges, startVertex);
		for (int i = 1; i <= numOfVertex; i++)
		{
			if (i == startVertex)
				continue;
			if (!visited[i])
			{
				VISIT_DFS(edges, i);
			}
		}
		System.out.println();
		
		// BFS
		Queue q = new LinkedList();
		visited = new boolean[numOfVertex+1]; // reset to false.
		visited[startVertex] = true;
		System.out.print(startVertex + " ");
		q.offer(startVertex);
		int u, size, v = 0;
		while (!q.isEmpty())
		{
			u = (int) q.poll();
			size = edges[u].size();
			for (int i = 0; i < size; i++)
			{
				v = edges[u].get(i);
				if (!visited[v])
				{
					visited[v] = true;
					System.out.print(v + " ");
					q.offer(v);
				}
			}
		}
	}
}
