import java.util.*;

public class PermutationCombinationTest {
	static int K, N;
	static boolean[] visited;
	static int[] result;
	static int[] arr;
	static int count = 0;
		
	public static void duplication(int idx) // Arrange N numbers to K-length numbers(with duplication) -> N^^K.
	{
		if (idx == K)
		{
			for (int i = 0; i < K; i++)
			{
				System.out.print(result[i]+" ");
			}
			System.out.println();
			count++;
		}
		else
		{
			for (int i = 0; i < N; i++)
			{
				result[idx] = arr[i];
				duplication(idx+1);
			}
		}
	}
		
	public static void permutation(int idx) // nPk (K <= N)
	{
		if (idx == K)
		{
			for (int i = 0; i < K; i++)
			{
				System.out.print(result[i]+" ");
			}
			System.out.println();
			count++;
		}
		else
		{
			for (int i = 0; i < N; i++)
			{
				if (!visited[i])
				{
					result[idx] = arr[i];
					visited[i] = true;
					permutation(idx+1);
					visited[i] = false;
				}
			}
		}
	}
	
	public static void combination() // nCk (K <= N)
	{
		for (int i = 0; i < N - K + 1; i++)
		{
			result[0] = arr[i];
			cb(1, i);
		}
	}
	public static void cb(int len, int last)
	{
		if (len == K)
		{
			for (int i = 0; i < K; i++)
			{
				System.out.print(result[i]+" ");
			}
			System.out.println();
			count++;
		}
		else
		{
			for (int i = last+1; i < N; i++)
			{
				result[len] = arr[i];
				cb(len+1, i);
			}
		}
	}
	
	public static void ArrangeWT(int idx) // select upto K numbers 'with' order (K <= N)
	{
		for (int i = 0; i < idx; i++)
		{
			System.out.print(result[i]+" ");
		}
		System.out.println();
		count++;
		if (idx < K)
		{
			for (int i = 0; i < N; i++)
			{
				if (!visited[i])
				{
					result[idx] = arr[i];
					visited[i] = true;
					ArrangeWT(idx+1);
					visited[i] = false;
				}
			}
		}
	}
	
	public static void ArrangeWO() // select upto K numbers 'without' order (K <= N)
	{
		for (int i = 0; i < N; i++)
		{
			result[0] = arr[i];
			AG(1, i);
		}
	}
	public static void AG(int len, int startIdx)
	{
		for (int i = 0; i < len; i++)
		{
			System.out.print(result[i]);
		}
		System.out.println();
		count++;
		
		if (len < K) // if len in result[len] is same or lower than maximal length K (prevent stackOverFlowError)
		{
			for (int i = startIdx+1; i < N; i++)
			{
				result[len] = arr[i];
				AG(len+1, i);
			}
		}
	}
	
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		
		while (true)
		{
			System.out.print("1. Arrange N numbers to K-length numbers\n2. nPk (K<=N)\n3. nCk (K<=N)\n" +
					"4. select upto K numbers 'with' order (K <= N)\n5. select upto K numbers 'without' order (K <= N)\nSelect: ");
			int sel = sc.nextInt();
			System.out.print("Enter number of input nums(N): ");
			N = sc.nextInt();
			arr = new int[N];
			visited = new boolean[N];
			System.out.print("Enter input nums(If you want default, enter d): ");
			String tt = sc.next();
			if (tt.charAt(0) == 'd' || tt.charAt(0) == 'D')
			{
				for (int i = 0; i < N; i++)
				{
					arr[i] = i+1;
				}
			}
			else
			{
				arr[0] = tt.charAt(0);
				for (int i = 1; i < N; i++)
				{
					arr[i] = sc.nextInt();
				}
			}
			System.out.print("Insert length of output num(K): ");
			K = sc.nextInt();
			result = new int[K];
			
			switch(sel)
			{
			case 1:
				duplication(0);
				break;
			case 2:
				permutation(0);
				break;
			case 3:
				combination();
				break;
			case 4:
				System.out.println("(Nothing)");
				ArrangeWT(0);
				break;
			case 5:
				System.out.println("(Nothing)");
				ArrangeWO();
				break;
			}
			System.out.println("count: "+count);
			count = 0;
			System.out.print("Want to quit, enter q: ");
			String tmp = sc.next();
			if (tmp.charAt(0) == 'q' || tmp.charAt(0) == 'Q')
				break;
		}
		System.out.print("FINISH!");
		sc.close();
	}
}
