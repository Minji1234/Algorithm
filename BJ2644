import java.io.*;
import java.util.*;

public class BJ2644 { // BFS
	static public class Node
	{
		int name;
		int color; // 0 means white, 1 means grey, 2 means black.
		int dis;
		Node pcd;
		
		public Node(int name)
		{
			this.name = name;
			color = 0;
			this.dis = Integer.MAX_VALUE;
			pcd = null;
		}
	}
	public static void main(String[] args) throws IOException
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int everyone = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		int from = Integer.parseInt(st.nextToken());
		int to = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		int size = Integer.parseInt(st.nextToken());
		
		ArrayList<Node> nodes = new ArrayList<Node>();
		nodes.add(0, new Node(0)); // <To avoid error, you should start with index 0.>
		for (int i = 1; i <= everyone; i++)
		{
			nodes.add(i, new Node(i));
		}
		ArrayList<Integer>[] graph = new ArrayList[everyone+1];
		for (int i = 1; i <= everyone; i++)
		{
			graph[i] = new ArrayList<Integer>();
		}
		int a, b = 0;
		for (int i = 0; i < size; i++)
		{
			st = new StringTokenizer(br.readLine());
			a = Integer.parseInt(st.nextToken());
			b = Integer.parseInt(st.nextToken());
			graph[a].add(b);
			graph[b].add(a);
		}
		Queue<Node> q = new LinkedList<Node>();
		Node start = new Node(from);
		start.dis = 0;
		start.color = 1;
		q.offer(start);
		while (!q.isEmpty())
		{
			Node tmp = q.poll();
			int siz = graph[tmp.name].size();
			for (int i = 0; i < siz; i++) // As when you added node at 'graph[]', you started from index 0.
			{
				int nuName = graph[tmp.name].get(i);
				Node t = nodes.get(nuName);
				if (t.color == 0)
				{
					t.dis = tmp.dis + 1;
					t.color = 1;
					t.pcd = tmp;
					q.offer(t);
				}
			}
		}
		Node goal = nodes.get(to);
		if (goal.dis == Integer.MAX_VALUE)
			System.out.println(-1);
		else
			System.out.println(goal.dis);
	}
}
