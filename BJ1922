import java.io.*;
import java.util.*;

public class BJ1922 { // MST-PRIM
	static int[] parents; // If you want to know exact edges composing MST, use this array.
	static int[] keys;
	static boolean[] visited;
	static int[][] edges;
	public static void main(String[] args) throws IOException
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int NumOfVtx = Integer.parseInt(st.nextToken());
		visited = new boolean[NumOfVtx+1]; // set to false.
		parents = new int[NumOfVtx+1]; // set to 0.
		keys = new int[NumOfVtx+1];
		Arrays.fill(keys, Integer.MAX_VALUE);
		keys[1] = 0; // start from Vertex 1.
		st = new StringTokenizer(br.readLine());
		int op = Integer.parseInt(st.nextToken());
		
		edges = new int[NumOfVtx+1][NumOfVtx+1];
		int a, b, c;
		for (int i = 0; i < op; i++)
		{
			st = new StringTokenizer(br.readLine());
			a = Integer.parseInt(st.nextToken());
			b = Integer.parseInt(st.nextToken());
			c = Integer.parseInt(st.nextToken());
			edges[a][b] = c;
			edges[b][a] = c;
		}
		int count = 0;
		int v = 0;
		int u, w, tmp = 0;
		int sum = 0;
		while (count < NumOfVtx)
		{
			tmp = Integer.MAX_VALUE;
			for (int i = 1; i <= NumOfVtx; i++)
			{
				if (keys[i] < tmp && !visited[i])
				{
					tmp = keys[i];
					v = i;
				}
			}
			visited[v] = true;
			sum += keys[v];
			for (int i = 1; i <= NumOfVtx; i++)
			{
				if (edges[v][i] != 0)
				{
					u = i;
					w = edges[v][i];
					if (!visited[u] && (w < keys[u]))
					{
						keys[u] = w;
						parents[u] = v;
					}
				}
			}
			count++;
		}
		System.out.println(sum);
	}
}
