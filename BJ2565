import java.io.*;
import java.util.*;

class Pair
{
	int index;
	int val;
	
	Pair(int index, int val)
	{
		this.index = index; // consider from as index
		this.val = val; // consider to as value
	}
}

public class Main // LIS
{
	public static ArrayList<Pair> pairs;
	public static int[] segTree;
//	public static int init(int from, int to, int node)
//	{
//		if (from == to)
//		{
//			return segTree[node] = arr[from];
//		}
//		else
//		{
//			int mid = (from + to) / 2;
//			return segTree[node] = Math.max(init(from, mid, node*2), init(mid + 1, to, (node*2)+1));
//		}
//	}
	public static int query(int from, int to, int node, int nodeLeft, int nodeRight)
	{
		if (to < nodeLeft || nodeRight < from)
		{
			return 0;
		}
		else if (from <= nodeLeft && nodeRight <= to)
		{
			return segTree[node];
		}
		else
		{
			int mid = (nodeLeft + nodeRight)/2;
			return Math.max(query(from, to, node*2, nodeLeft, mid), query(from, to, (node*2)+1, mid+1, nodeRight));
		}
	}
	public static int update(int index, int val, int node, int nodeLeft, int nodeRight)
	{
		if (nodeLeft == nodeRight)
		{
			return segTree[node] = val;
		}
		else if (index < nodeLeft || nodeRight < index)
		{
			return segTree[node];
		}
		else
		{
			int mid = (nodeLeft + nodeRight) / 2;
			return segTree[node] = Math.max(update(index, val, node*2, nodeLeft, mid), update(index, val, (node*2)+1, mid+1, nodeRight));
		}
	}
	public static void main(String[] args) throws IOException
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int lineNum = Integer.parseInt(st.nextToken());
		pairs = new ArrayList<Pair>();
		segTree = new int[500*4+1];
		int a, b;
		for (int i = 0; i < lineNum; i++)
		{
			st = new StringTokenizer(br.readLine());
			a = Integer.parseInt(st.nextToken());
			b = Integer.parseInt(st.nextToken());
			pairs.add(new Pair(a, b));
		}
		Collections.sort(pairs, (p1, p2) -> p1.val == p2.val ? p2.index - p1.index : p1.val - p2.val);
//		init(0, lineNum-1, 1);
		int index, val;
		for (int i = 0; i < lineNum; i++)
		{
			index = pairs.get(i).index;
			val = query(0, index, 1, 0, 499);
			update(index, val+1, 1, 0, 499);
		}
		bw.write(lineNum - segTree[1]+"\n");
		bw.flush();
		bw.close();
	}
}
