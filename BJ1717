import java.io.*;
import java.util.*;

public class BJ1717 {
	static int[] nums; // saving parents.
	static int[] ranks; // saving ranks.
	private static void UNION(int x, int y)
	{
		LINK(FIND_SET(x), FIND_SET(y));
	}
	private static int FIND_SET(int x) // Path Compression
	{
		if (x != nums[x])
			nums[x] = FIND_SET(nums[x]);
		return nums[x];
	}
	private static void LINK(int x, int y) // Union by Rank
	{
		if (x == y)
			return;
		if (ranks[x] > ranks[y])
			nums[y] = x;
		else
		{
			nums[x] = y;
			if (ranks[x] == ranks[y])
				ranks[y]++;
		}
	}
	private static boolean CHECK(int x, int y)
	{
		return (FIND_SET(x) == FIND_SET(y));
	}
	public static void main(String[] args) throws IOException
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int num = Integer.parseInt(st.nextToken());
		nums = new int[num+1];
		ranks = new int[num+1]; // set to 0.
		for (int i = 0; i <= num; i++)
		{
			nums[i] = i; // MAKE-SET(i)
		}
		int op = Integer.parseInt(st.nextToken());
		int a, b, c = 0;
		for (int i = 0; i < op; i++)
		{
			st = new StringTokenizer(br.readLine());
			a = Integer.parseInt(st.nextToken());
			b = Integer.parseInt(st.nextToken());
			c = Integer.parseInt(st.nextToken());
			if (a == 0)
				UNION(b, c);
			else // if (a == 1)
			{
				if (CHECK(b, c))
					System.out.println("YES");
				else
					System.out.println("NO");
			}
		}
	}
}
