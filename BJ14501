import java.io.*;
import java.util.*;

public class BJ14501 { // Dynamic Programming
	public static void main(String[] args) throws IOException
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int input = Integer.parseInt(st.nextToken());
		int[] reqDays = new int[input+1];
		int[] payment = new int[input+1];
		int[][] cal = new int[input+1][input+1]; // set to 0; // row means work input(until), col means day input(until).
		int[][] unvacant = new int[input+1][input+1]; // set to 0;
		int[][] pre = new int[input+1][input+1]; // set to 0;
		boolean[] check = new boolean[input+1];
		for (int i = 1; i <= input; i++)
		{
			st = new StringTokenizer(br.readLine());
			reqDays[i] = Integer.parseInt(st.nextToken());
			payment[i] = Integer.parseInt(st.nextToken());
		}
		
		
		for (int i = 1; i <= input; i++)
		{
			if (i >= reqDays[1])
			{
				cal[1][i] = payment[1];
				unvacant[1][i] += reqDays[1];
			}
		}
		for (int i = 1; i <= input; i++)
		{
			if (reqDays[i] + i > input + 1)
			{
				check[i] = true;
			}
		}
		for (int i = 2; i <= input; i++)
		{
			for (int j = 1; j <= input; j++)
			{
				if (j >= i && j >= reqDays[i] && check[i] == false && reqDays[i] <= j)
				{
					if (cal[i-1][j] < payment[i]+cal[i-1][j-reqDays[i]])
					{
						int tmp = j-reqDays[i];
						if (tmp > i-1 && j + 1 >= i + reqDays[i])
						{
							cal[i][j] = Math.max(cal[i-1][j], payment[i]+cal[i-1][i-1]);
						}
						else if (j + 1 >= i + reqDays[i])
						{
							cal[i][j] = Math.max(cal[i-1][j], payment[i]+cal[i-1][j-reqDays[i]]);
						}
						else
						{
							cal[i][j] = cal[i-1][j];
						}
					}
					else
					{
						cal[i][j] = cal[i-1][j];
					}
				}
				else
				{
					cal[i][j] = cal[i-1][j];
				}
			}
		}
		System.out.println(cal[input][input]);
	}
}
